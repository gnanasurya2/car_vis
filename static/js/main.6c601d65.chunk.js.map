{"version":3,"sources":["styles/SideBar.module.css","components/Accordian.js","components/SideBar.js","components/Cube.js","components/Scene.js","App.js","serviceWorker.js","index.js","styles/Accordian.module.css"],"names":["module","exports","Accordian","props","panelRef","useRef","useState","symbol","setSymbol","className","styles","wrapper","header","title","toggle","onClick","current","style","maxHeight","scrollHeight","panel","ref","list","items","map","ele","index","key","click","colorData","backgroundData","scale","SideBar","color","colorHandler","backgroundColor","size","scaleHandler","Cube","attach","args","Board","styled","Canvas","extend","OrbitControls","CameraControls","useThree","camera","domElement","gl","controls","useFrame","state","update","Scene","height","width","background","position","App","setColor","setBackgroundColor","setSize","colour","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c601d65.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SideBar_wrapper__UK3zq\"};","import React, { useRef, useState } from \"react\";\nimport styles from \"../styles/Accordian.module.css\";\n\nconst Accordian = (props) => {\n  const panelRef = useRef(null);\n  const [symbol, setSymbol] = useState(\"+\");\n  const ToggleHandler = () => {\n    if (panelRef.current.style.maxHeight) {\n      panelRef.current.style.maxHeight = null;\n      setSymbol(\"+\");\n    } else {\n      panelRef.current.style.maxHeight = panelRef.current.scrollHeight + \"px\";\n      setSymbol(\"-\");\n    }\n  };\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <h2 className={styles.title}>{props.title}</h2>\n        <button className={styles.toggle} onClick={ToggleHandler}>\n          {symbol}\n        </button>\n      </div>\n      <div className={styles.panel} ref={panelRef}>\n        <ul className={styles.list}>\n          {props.items.map((ele, index) => (\n            <li key={index} onClick={() => props.click(index)}>\n              {ele}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Accordian;\n","import React from \"react\";\nimport styles from \"../styles/SideBar.module.css\";\nimport Accordian from \"./Accordian\";\n\nconst colorData = [\"hotpink\", \"blue\", \"green\", \"black\"];\nconst backgroundData = [\"indigo\", \"green\", \"cyan\"];\nconst scale = [1, 2, 3];\nconst SideBar = (props) => {\n  return (\n    <div className={styles.wrapper}>\n      <Accordian\n        title=\"color\"\n        items={colorData}\n        click={(color) => props.colorHandler(colorData[color])}\n      />\n      <Accordian\n        title=\"background color\"\n        items={backgroundData}\n        click={(color) => props.backgroundColor(backgroundData[color])}\n      />\n      <Accordian\n        title=\"Size\"\n        items={scale}\n        click={(size) => props.scaleHandler(scale[size])}\n      />\n    </div>\n  );\n};\n\nexport default SideBar;\n","import React from \"react\";\n\nconst Cube = (props) => {\n  return (\n    <mesh>\n      <boxBufferGeometry\n        attach=\"geometry\"\n        args={[props.size, props.size, props.size]}\n      />\n      <meshPhongMaterial attach=\"material\" color={props.color} />\n    </mesh>\n  );\n};\n\nexport default Cube;\n","import React, { useRef } from \"react\";\nimport { Canvas, useThree, extend, useFrame } from \"react-three-fiber\";\nimport Cube from \"./Cube\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport styled from \"styled-components\";\n\nconst Board = styled(Canvas)`\n  width: 70%;\n  background-color: ${(props) => props.color};\n  position: fixed;\n  left: 30%;\n`;\nextend({ OrbitControls });\nconst CameraControls = () => {\n  const {\n    camera,\n    gl: { domElement },\n  } = useThree();\n  const controls = useRef();\n  useFrame((state) => controls.current.update());\n  return <orbitControls ref={controls} args={[camera, domElement]} />;\n};\nconst Scene = (props) => {\n  return (\n    <Board style={{ height: \"100vh\", width: \"70%\" }} color={props.background}>\n      <CameraControls />\n      <ambientLight />\n      <pointLight position={[10, 10, 10]} />\n      <Cube color={props.color} size={props.size} />\n    </Board>\n  );\n};\n\nexport default Scene;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport SideBar from \"./components/SideBar\";\nimport Scene from \"./components/Scene\";\n\nfunction App() {\n  const [color, setColor] = useState(\"hotpink\");\n  const [backgroundColor, setBackgroundColor] = useState(\"indigo\");\n  const [size, setSize] = useState(1);\n  const colorHandler = (colour) => {\n    setColor(colour);\n  };\n  const backgroundHandler = (colour) => {\n    setBackgroundColor(colour);\n  };\n  const sizeHandler = (scale) => {\n    setSize(scale);\n  };\n  return (\n    <div className=\"App\">\n      <SideBar\n        colorHandler={colorHandler}\n        backgroundColor={backgroundHandler}\n        scaleHandler={sizeHandler}\n      />\n      <Scene color={color} background={backgroundColor} size={size} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Accordian_wrapper__2EoLD\",\"header\":\"Accordian_header__2vk94\",\"title\":\"Accordian_title__D9kHc\",\"toggle\":\"Accordian_toggle__2PRW-\",\"panel\":\"Accordian_panel__2zYHj\",\"list\":\"Accordian_list__avgxy\"};"],"sourceRoot":""}